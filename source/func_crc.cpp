/////////////////////////////////////////////////////////////////////////////
// func_crc.cpp
//
// Copyright (c) 1992-2023, Robert McNeel & Associates. All rights reserved.
// DOSLib is a trademark of Robert McNeel & Associates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//

#include "StdAfx.h"
#include "DOSLibApp.h"

/*
  Compute the CRC-32 of a data stream
  Copyright (C) 1995-1998 Mark Adler
  For conditions of distribution and use, see copyright notice in zlib.h

  ...

  zlib.h -- interface of the 'zlib' general purpose compression library
  version 1.1.3, July 9th, 1998

  Copyright (C) 1995-1998 Jean-loup Gailly and Mark Adler

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jean-loup Gailly        Mark Adler
  jloup@gzip.org          madler@alumni.caltech.edu

  The data format used by the zlib library is described by RFCs (Request for
  Comments) 1950 to 1952 in the files ftp://ds.internic.net/rfc/rfc1950.txt
  (zlib format), rfc1951.txt (deflate format) and rfc1952.txt (gzip format).
*/

namespace CRC_32
{
    typedef UINT32 CRC_DATA_TYPE;

    const UINT32 crc32_table[256] =
    {
      0x00000000UL, 0x77073096UL, 0xee0e612cUL, 0x990951baUL, 0x076dc419UL,
      0x706af48fUL, 0xe963a535UL, 0x9e6495a3UL, 0x0edb8832UL, 0x79dcb8a4UL,
      0xe0d5e91eUL, 0x97d2d988UL, 0x09b64c2bUL, 0x7eb17cbdUL, 0xe7b82d07UL,
      0x90bf1d91UL, 0x1db71064UL, 0x6ab020f2UL, 0xf3b97148UL, 0x84be41deUL,
      0x1adad47dUL, 0x6ddde4ebUL, 0xf4d4b551UL, 0x83d385c7UL, 0x136c9856UL,
      0x646ba8c0UL, 0xfd62f97aUL, 0x8a65c9ecUL, 0x14015c4fUL, 0x63066cd9UL,
      0xfa0f3d63UL, 0x8d080df5UL, 0x3b6e20c8UL, 0x4c69105eUL, 0xd56041e4UL,
      0xa2677172UL, 0x3c03e4d1UL, 0x4b04d447UL, 0xd20d85fdUL, 0xa50ab56bUL,
      0x35b5a8faUL, 0x42b2986cUL, 0xdbbbc9d6UL, 0xacbcf940UL, 0x32d86ce3UL,
      0x45df5c75UL, 0xdcd60dcfUL, 0xabd13d59UL, 0x26d930acUL, 0x51de003aUL,
      0xc8d75180UL, 0xbfd06116UL, 0x21b4f4b5UL, 0x56b3c423UL, 0xcfba9599UL,
      0xb8bda50fUL, 0x2802b89eUL, 0x5f058808UL, 0xc60cd9b2UL, 0xb10be924UL,
      0x2f6f7c87UL, 0x58684c11UL, 0xc1611dabUL, 0xb6662d3dUL, 0x76dc4190UL,
      0x01db7106UL, 0x98d220bcUL, 0xefd5102aUL, 0x71b18589UL, 0x06b6b51fUL,
      0x9fbfe4a5UL, 0xe8b8d433UL, 0x7807c9a2UL, 0x0f00f934UL, 0x9609a88eUL,
      0xe10e9818UL, 0x7f6a0dbbUL, 0x086d3d2dUL, 0x91646c97UL, 0xe6635c01UL,
      0x6b6b51f4UL, 0x1c6c6162UL, 0x856530d8UL, 0xf262004eUL, 0x6c0695edUL,
      0x1b01a57bUL, 0x8208f4c1UL, 0xf50fc457UL, 0x65b0d9c6UL, 0x12b7e950UL,
      0x8bbeb8eaUL, 0xfcb9887cUL, 0x62dd1ddfUL, 0x15da2d49UL, 0x8cd37cf3UL,
      0xfbd44c65UL, 0x4db26158UL, 0x3ab551ceUL, 0xa3bc0074UL, 0xd4bb30e2UL,
      0x4adfa541UL, 0x3dd895d7UL, 0xa4d1c46dUL, 0xd3d6f4fbUL, 0x4369e96aUL,
      0x346ed9fcUL, 0xad678846UL, 0xda60b8d0UL, 0x44042d73UL, 0x33031de5UL,
      0xaa0a4c5fUL, 0xdd0d7cc9UL, 0x5005713cUL, 0x270241aaUL, 0xbe0b1010UL,
      0xc90c2086UL, 0x5768b525UL, 0x206f85b3UL, 0xb966d409UL, 0xce61e49fUL,
      0x5edef90eUL, 0x29d9c998UL, 0xb0d09822UL, 0xc7d7a8b4UL, 0x59b33d17UL,
      0x2eb40d81UL, 0xb7bd5c3bUL, 0xc0ba6cadUL, 0xedb88320UL, 0x9abfb3b6UL,
      0x03b6e20cUL, 0x74b1d29aUL, 0xead54739UL, 0x9dd277afUL, 0x04db2615UL,
      0x73dc1683UL, 0xe3630b12UL, 0x94643b84UL, 0x0d6d6a3eUL, 0x7a6a5aa8UL,
      0xe40ecf0bUL, 0x9309ff9dUL, 0x0a00ae27UL, 0x7d079eb1UL, 0xf00f9344UL,
      0x8708a3d2UL, 0x1e01f268UL, 0x6906c2feUL, 0xf762575dUL, 0x806567cbUL,
      0x196c3671UL, 0x6e6b06e7UL, 0xfed41b76UL, 0x89d32be0UL, 0x10da7a5aUL,
      0x67dd4accUL, 0xf9b9df6fUL, 0x8ebeeff9UL, 0x17b7be43UL, 0x60b08ed5UL,
      0xd6d6a3e8UL, 0xa1d1937eUL, 0x38d8c2c4UL, 0x4fdff252UL, 0xd1bb67f1UL,
      0xa6bc5767UL, 0x3fb506ddUL, 0x48b2364bUL, 0xd80d2bdaUL, 0xaf0a1b4cUL,
      0x36034af6UL, 0x41047a60UL, 0xdf60efc3UL, 0xa867df55UL, 0x316e8eefUL,
      0x4669be79UL, 0xcb61b38cUL, 0xbc66831aUL, 0x256fd2a0UL, 0x5268e236UL,
      0xcc0c7795UL, 0xbb0b4703UL, 0x220216b9UL, 0x5505262fUL, 0xc5ba3bbeUL,
      0xb2bd0b28UL, 0x2bb45a92UL, 0x5cb36a04UL, 0xc2d7ffa7UL, 0xb5d0cf31UL,
      0x2cd99e8bUL, 0x5bdeae1dUL, 0x9b64c2b0UL, 0xec63f226UL, 0x756aa39cUL,
      0x026d930aUL, 0x9c0906a9UL, 0xeb0e363fUL, 0x72076785UL, 0x05005713UL,
      0x95bf4a82UL, 0xe2b87a14UL, 0x7bb12baeUL, 0x0cb61b38UL, 0x92d28e9bUL,
      0xe5d5be0dUL, 0x7cdcefb7UL, 0x0bdbdf21UL, 0x86d3d2d4UL, 0xf1d4e242UL,
      0x68ddb3f8UL, 0x1fda836eUL, 0x81be16cdUL, 0xf6b9265bUL, 0x6fb077e1UL,
      0x18b74777UL, 0x88085ae6UL, 0xff0f6a70UL, 0x66063bcaUL, 0x11010b5cUL,
      0x8f659effUL, 0xf862ae69UL, 0x616bffd3UL, 0x166ccf45UL, 0xa00ae278UL,
      0xd70dd2eeUL, 0x4e048354UL, 0x3903b3c2UL, 0xa7672661UL, 0xd06016f7UL,
      0x4969474dUL, 0x3e6e77dbUL, 0xaed16a4aUL, 0xd9d65adcUL, 0x40df0b66UL,
      0x37d83bf0UL, 0xa9bcae53UL, 0xdebb9ec5UL, 0x47b2cf7fUL, 0x30b5ffe9UL,
      0xbdbdf21cUL, 0xcabac28aUL, 0x53b39330UL, 0x24b4a3a6UL, 0xbad03605UL,
      0xcdd70693UL, 0x54de5729UL, 0x23d967bfUL, 0xb3667a2eUL, 0xc4614ab8UL,
      0x5d681b02UL, 0x2a6f2b94UL, 0xb40bbe37UL, 0xc30c8ea1UL, 0x5a05df1bUL,
      0x2d02ef8dUL
    };

#define DO1(buf) crc = crc32_table[(crc ^ (*pbData++)) & 0xff] ^ (crc >> 8);
#define DO2(buf) DO1(buf); DO1(buf);
#define DO4(buf) DO2(buf); DO2(buf);
#define DO8(buf) DO4(buf); DO4(buf);

    // Initialize a CRC accumulator
    void Init_crc(UINT32& crc)
    {
        crc = 0xffffffffUL;
    }

    // Finish a CRC calculation
    void Fin_crc(UINT32& crc)
    {
        crc ^= 0xffffffffUL;
    }

    // Accumulate some (more) bytes into a CRC
    void Calc_crc(UINT32& crc, PBYTE pbData, size_t len)
    {
        while (len >= 8)
        {
            DO8(buf);
            len -= 8;
        }
        if (len)
        {
            do
            {
                DO1(buf);
            } while (--len);
        }
    }

} // namespace CRC_32

////////////////////////////////////////////////////////////////

/*
  PostgreSQL 64-bit CRC support

  ...

  PostgreSQL Data Base Management System

  Portions Copyright (c) 1996-2005, PostgreSQL Global Development Group
  Portions Copyright (c) 1994-1996 Regents of the University of California

  Permission to use, copy, modify, and distribute this software and its
  documentation for any purpose, without fee, and without a written agreement
  is hereby granted, provided that the above copyright notice and this
  paragraph and the following two paragraphs appear in all copies.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
  DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
  LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
  EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY
  OF SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS
  ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS
  TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
*/

namespace CRC_64
{
#define INT64CONST(x)  ((INT64) x##LL)
#define UINT64CONST(x) ((UINT64) x##ULL)

    typedef UINT64 CRC_DATA_TYPE;

    const UINT64 crc64_table[256] =
    {
      UINT64CONST(0x0000000000000000), UINT64CONST(0x42F0E1EBA9EA3693),
      UINT64CONST(0x85E1C3D753D46D26), UINT64CONST(0xC711223CFA3E5BB5),
      UINT64CONST(0x493366450E42ECDF), UINT64CONST(0x0BC387AEA7A8DA4C),
      UINT64CONST(0xCCD2A5925D9681F9), UINT64CONST(0x8E224479F47CB76A),
      UINT64CONST(0x9266CC8A1C85D9BE), UINT64CONST(0xD0962D61B56FEF2D),
      UINT64CONST(0x17870F5D4F51B498), UINT64CONST(0x5577EEB6E6BB820B),
      UINT64CONST(0xDB55AACF12C73561), UINT64CONST(0x99A54B24BB2D03F2),
      UINT64CONST(0x5EB4691841135847), UINT64CONST(0x1C4488F3E8F96ED4),
      UINT64CONST(0x663D78FF90E185EF), UINT64CONST(0x24CD9914390BB37C),
      UINT64CONST(0xE3DCBB28C335E8C9), UINT64CONST(0xA12C5AC36ADFDE5A),
      UINT64CONST(0x2F0E1EBA9EA36930), UINT64CONST(0x6DFEFF5137495FA3),
      UINT64CONST(0xAAEFDD6DCD770416), UINT64CONST(0xE81F3C86649D3285),
      UINT64CONST(0xF45BB4758C645C51), UINT64CONST(0xB6AB559E258E6AC2),
      UINT64CONST(0x71BA77A2DFB03177), UINT64CONST(0x334A9649765A07E4),
      UINT64CONST(0xBD68D2308226B08E), UINT64CONST(0xFF9833DB2BCC861D),
      UINT64CONST(0x388911E7D1F2DDA8), UINT64CONST(0x7A79F00C7818EB3B),
      UINT64CONST(0xCC7AF1FF21C30BDE), UINT64CONST(0x8E8A101488293D4D),
      UINT64CONST(0x499B3228721766F8), UINT64CONST(0x0B6BD3C3DBFD506B),
      UINT64CONST(0x854997BA2F81E701), UINT64CONST(0xC7B97651866BD192),
      UINT64CONST(0x00A8546D7C558A27), UINT64CONST(0x4258B586D5BFBCB4),
      UINT64CONST(0x5E1C3D753D46D260), UINT64CONST(0x1CECDC9E94ACE4F3),
      UINT64CONST(0xDBFDFEA26E92BF46), UINT64CONST(0x990D1F49C77889D5),
      UINT64CONST(0x172F5B3033043EBF), UINT64CONST(0x55DFBADB9AEE082C),
      UINT64CONST(0x92CE98E760D05399), UINT64CONST(0xD03E790CC93A650A),
      UINT64CONST(0xAA478900B1228E31), UINT64CONST(0xE8B768EB18C8B8A2),
      UINT64CONST(0x2FA64AD7E2F6E317), UINT64CONST(0x6D56AB3C4B1CD584),
      UINT64CONST(0xE374EF45BF6062EE), UINT64CONST(0xA1840EAE168A547D),
      UINT64CONST(0x66952C92ECB40FC8), UINT64CONST(0x2465CD79455E395B),
      UINT64CONST(0x3821458AADA7578F), UINT64CONST(0x7AD1A461044D611C),
      UINT64CONST(0xBDC0865DFE733AA9), UINT64CONST(0xFF3067B657990C3A),
      UINT64CONST(0x711223CFA3E5BB50), UINT64CONST(0x33E2C2240A0F8DC3),
      UINT64CONST(0xF4F3E018F031D676), UINT64CONST(0xB60301F359DBE0E5),
      UINT64CONST(0xDA050215EA6C212F), UINT64CONST(0x98F5E3FE438617BC),
      UINT64CONST(0x5FE4C1C2B9B84C09), UINT64CONST(0x1D14202910527A9A),
      UINT64CONST(0x93366450E42ECDF0), UINT64CONST(0xD1C685BB4DC4FB63),
      UINT64CONST(0x16D7A787B7FAA0D6), UINT64CONST(0x5427466C1E109645),
      UINT64CONST(0x4863CE9FF6E9F891), UINT64CONST(0x0A932F745F03CE02),
      UINT64CONST(0xCD820D48A53D95B7), UINT64CONST(0x8F72ECA30CD7A324),
      UINT64CONST(0x0150A8DAF8AB144E), UINT64CONST(0x43A04931514122DD),
      UINT64CONST(0x84B16B0DAB7F7968), UINT64CONST(0xC6418AE602954FFB),
      UINT64CONST(0xBC387AEA7A8DA4C0), UINT64CONST(0xFEC89B01D3679253),
      UINT64CONST(0x39D9B93D2959C9E6), UINT64CONST(0x7B2958D680B3FF75),
      UINT64CONST(0xF50B1CAF74CF481F), UINT64CONST(0xB7FBFD44DD257E8C),
      UINT64CONST(0x70EADF78271B2539), UINT64CONST(0x321A3E938EF113AA),
      UINT64CONST(0x2E5EB66066087D7E), UINT64CONST(0x6CAE578BCFE24BED),
      UINT64CONST(0xABBF75B735DC1058), UINT64CONST(0xE94F945C9C3626CB),
      UINT64CONST(0x676DD025684A91A1), UINT64CONST(0x259D31CEC1A0A732),
      UINT64CONST(0xE28C13F23B9EFC87), UINT64CONST(0xA07CF2199274CA14),
      UINT64CONST(0x167FF3EACBAF2AF1), UINT64CONST(0x548F120162451C62),
      UINT64CONST(0x939E303D987B47D7), UINT64CONST(0xD16ED1D631917144),
      UINT64CONST(0x5F4C95AFC5EDC62E), UINT64CONST(0x1DBC74446C07F0BD),
      UINT64CONST(0xDAAD56789639AB08), UINT64CONST(0x985DB7933FD39D9B),
      UINT64CONST(0x84193F60D72AF34F), UINT64CONST(0xC6E9DE8B7EC0C5DC),
      UINT64CONST(0x01F8FCB784FE9E69), UINT64CONST(0x43081D5C2D14A8FA),
      UINT64CONST(0xCD2A5925D9681F90), UINT64CONST(0x8FDAB8CE70822903),
      UINT64CONST(0x48CB9AF28ABC72B6), UINT64CONST(0x0A3B7B1923564425),
      UINT64CONST(0x70428B155B4EAF1E), UINT64CONST(0x32B26AFEF2A4998D),
      UINT64CONST(0xF5A348C2089AC238), UINT64CONST(0xB753A929A170F4AB),
      UINT64CONST(0x3971ED50550C43C1), UINT64CONST(0x7B810CBBFCE67552),
      UINT64CONST(0xBC902E8706D82EE7), UINT64CONST(0xFE60CF6CAF321874),
      UINT64CONST(0xE224479F47CB76A0), UINT64CONST(0xA0D4A674EE214033),
      UINT64CONST(0x67C58448141F1B86), UINT64CONST(0x253565A3BDF52D15),
      UINT64CONST(0xAB1721DA49899A7F), UINT64CONST(0xE9E7C031E063ACEC),
      UINT64CONST(0x2EF6E20D1A5DF759), UINT64CONST(0x6C0603E6B3B7C1CA),
      UINT64CONST(0xF6FAE5C07D3274CD), UINT64CONST(0xB40A042BD4D8425E),
      UINT64CONST(0x731B26172EE619EB), UINT64CONST(0x31EBC7FC870C2F78),
      UINT64CONST(0xBFC9838573709812), UINT64CONST(0xFD39626EDA9AAE81),
      UINT64CONST(0x3A28405220A4F534), UINT64CONST(0x78D8A1B9894EC3A7),
      UINT64CONST(0x649C294A61B7AD73), UINT64CONST(0x266CC8A1C85D9BE0),
      UINT64CONST(0xE17DEA9D3263C055), UINT64CONST(0xA38D0B769B89F6C6),
      UINT64CONST(0x2DAF4F0F6FF541AC), UINT64CONST(0x6F5FAEE4C61F773F),
      UINT64CONST(0xA84E8CD83C212C8A), UINT64CONST(0xEABE6D3395CB1A19),
      UINT64CONST(0x90C79D3FEDD3F122), UINT64CONST(0xD2377CD44439C7B1),
      UINT64CONST(0x15265EE8BE079C04), UINT64CONST(0x57D6BF0317EDAA97),
      UINT64CONST(0xD9F4FB7AE3911DFD), UINT64CONST(0x9B041A914A7B2B6E),
      UINT64CONST(0x5C1538ADB04570DB), UINT64CONST(0x1EE5D94619AF4648),
      UINT64CONST(0x02A151B5F156289C), UINT64CONST(0x4051B05E58BC1E0F),
      UINT64CONST(0x87409262A28245BA), UINT64CONST(0xC5B073890B687329),
      UINT64CONST(0x4B9237F0FF14C443), UINT64CONST(0x0962D61B56FEF2D0),
      UINT64CONST(0xCE73F427ACC0A965), UINT64CONST(0x8C8315CC052A9FF6),
      UINT64CONST(0x3A80143F5CF17F13), UINT64CONST(0x7870F5D4F51B4980),
      UINT64CONST(0xBF61D7E80F251235), UINT64CONST(0xFD913603A6CF24A6),
      UINT64CONST(0x73B3727A52B393CC), UINT64CONST(0x31439391FB59A55F),
      UINT64CONST(0xF652B1AD0167FEEA), UINT64CONST(0xB4A25046A88DC879),
      UINT64CONST(0xA8E6D8B54074A6AD), UINT64CONST(0xEA16395EE99E903E),
      UINT64CONST(0x2D071B6213A0CB8B), UINT64CONST(0x6FF7FA89BA4AFD18),
      UINT64CONST(0xE1D5BEF04E364A72), UINT64CONST(0xA3255F1BE7DC7CE1),
      UINT64CONST(0x64347D271DE22754), UINT64CONST(0x26C49CCCB40811C7),
      UINT64CONST(0x5CBD6CC0CC10FAFC), UINT64CONST(0x1E4D8D2B65FACC6F),
      UINT64CONST(0xD95CAF179FC497DA), UINT64CONST(0x9BAC4EFC362EA149),
      UINT64CONST(0x158E0A85C2521623), UINT64CONST(0x577EEB6E6BB820B0),
      UINT64CONST(0x906FC95291867B05), UINT64CONST(0xD29F28B9386C4D96),
      UINT64CONST(0xCEDBA04AD0952342), UINT64CONST(0x8C2B41A1797F15D1),
      UINT64CONST(0x4B3A639D83414E64), UINT64CONST(0x09CA82762AAB78F7),
      UINT64CONST(0x87E8C60FDED7CF9D), UINT64CONST(0xC51827E4773DF90E),
      UINT64CONST(0x020905D88D03A2BB), UINT64CONST(0x40F9E43324E99428),
      UINT64CONST(0x2CFFE7D5975E55E2), UINT64CONST(0x6E0F063E3EB46371),
      UINT64CONST(0xA91E2402C48A38C4), UINT64CONST(0xEBEEC5E96D600E57),
      UINT64CONST(0x65CC8190991CB93D), UINT64CONST(0x273C607B30F68FAE),
      UINT64CONST(0xE02D4247CAC8D41B), UINT64CONST(0xA2DDA3AC6322E288),
      UINT64CONST(0xBE992B5F8BDB8C5C), UINT64CONST(0xFC69CAB42231BACF),
      UINT64CONST(0x3B78E888D80FE17A), UINT64CONST(0x7988096371E5D7E9),
      UINT64CONST(0xF7AA4D1A85996083), UINT64CONST(0xB55AACF12C735610),
      UINT64CONST(0x724B8ECDD64D0DA5), UINT64CONST(0x30BB6F267FA73B36),
      UINT64CONST(0x4AC29F2A07BFD00D), UINT64CONST(0x08327EC1AE55E69E),
      UINT64CONST(0xCF235CFD546BBD2B), UINT64CONST(0x8DD3BD16FD818BB8),
      UINT64CONST(0x03F1F96F09FD3CD2), UINT64CONST(0x41011884A0170A41),
      UINT64CONST(0x86103AB85A2951F4), UINT64CONST(0xC4E0DB53F3C36767),
      UINT64CONST(0xD8A453A01B3A09B3), UINT64CONST(0x9A54B24BB2D03F20),
      UINT64CONST(0x5D45907748EE6495), UINT64CONST(0x1FB5719CE1045206),
      UINT64CONST(0x919735E51578E56C), UINT64CONST(0xD367D40EBC92D3FF),
      UINT64CONST(0x1476F63246AC884A), UINT64CONST(0x568617D9EF46BED9),
      UINT64CONST(0xE085162AB69D5E3C), UINT64CONST(0xA275F7C11F7768AF),
      UINT64CONST(0x6564D5FDE549331A), UINT64CONST(0x279434164CA30589),
      UINT64CONST(0xA9B6706FB8DFB2E3), UINT64CONST(0xEB46918411358470),
      UINT64CONST(0x2C57B3B8EB0BDFC5), UINT64CONST(0x6EA7525342E1E956),
      UINT64CONST(0x72E3DAA0AA188782), UINT64CONST(0x30133B4B03F2B111),
      UINT64CONST(0xF7021977F9CCEAA4), UINT64CONST(0xB5F2F89C5026DC37),
      UINT64CONST(0x3BD0BCE5A45A6B5D), UINT64CONST(0x79205D0E0DB05DCE),
      UINT64CONST(0xBE317F32F78E067B), UINT64CONST(0xFCC19ED95E6430E8),
      UINT64CONST(0x86B86ED5267CDBD3), UINT64CONST(0xC4488F3E8F96ED40),
      UINT64CONST(0x0359AD0275A8B6F5), UINT64CONST(0x41A94CE9DC428066),
      UINT64CONST(0xCF8B0890283E370C), UINT64CONST(0x8D7BE97B81D4019F),
      UINT64CONST(0x4A6ACB477BEA5A2A), UINT64CONST(0x089A2AACD2006CB9),
      UINT64CONST(0x14DEA25F3AF9026D), UINT64CONST(0x562E43B4931334FE),
      UINT64CONST(0x913F6188692D6F4B), UINT64CONST(0xD3CF8063C0C759D8),
      UINT64CONST(0x5DEDC41A34BBEEB2), UINT64CONST(0x1F1D25F19D51D821),
      UINT64CONST(0xD80C07CD676F8394), UINT64CONST(0x9AFCE626CE85B507)
    };

    // Initialize a CRC accumulator
    void Init_crc(UINT64& crc)
    {
        crc = UINT64CONST(0xffffffffffffffff);
    }

    // Finish a CRC calculation
    void Fin_crc(UINT64& crc)
    {
        crc ^= UINT64CONST(0xffffffffffffffff);
    }

    // Accumulate some (more) bytes into a CRC
    void Calc_crc(UINT64& crc, PBYTE pbData, size_t len)
    {
        PBYTE __pbData = pbData;
        size_t __len = len;

        while (__len-- > 0)
        {
            UINT __tab_index = ((UINT)(crc >> 56) ^ *__pbData++) & 0xFF;
            crc = crc64_table[__tab_index] ^ (crc << 8);
        }
    }

} // namespace CRC_64

////////////////////////////////////////////////////////////////

#define BUF_SIZE (64 * 1024)

// Compute the 32-bit CRC of a file
static UINT32 Calc32Crc(FILE* pfile)
{
    BYTE pbBuf[BUF_SIZE];
    UINT32 crc = 0;
    size_t sizeBytesRead = 0;

    CRC_32::Init_crc(crc);

    do
    {
        sizeBytesRead = fread(pbBuf, 1, BUF_SIZE, pfile);
        if (0 == sizeBytesRead)
        {
            CRC_32::Fin_crc(crc);
        }
        else
        {
            CRC_32::Calc_crc(crc, pbBuf, sizeBytesRead);
        }
    } while (sizeBytesRead);

    return crc;
}

// Compute the 64-bit CRC of a file
static ULONG64 Calc64Crc(FILE* pfile)
{
    BYTE pbBuf[BUF_SIZE];
    ULONG64 crc = 0;
    size_t sizeBytesRead = 0;

    CRC_64::Init_crc(crc);

    do
    {
        sizeBytesRead = fread(pbBuf, 1, BUF_SIZE, pfile);
        if (0 == sizeBytesRead)
        {
            CRC_64::Fin_crc(crc);
        }
        else
        {
            CRC_64::Calc_crc(crc, pbBuf, sizeBytesRead);
        }
    } while (sizeBytesRead);

    return crc;
}

////////////////////////////////////////////////////////////////
// dos_filecrc
int CDOSLibApp::ads_dos_filecrc()
{
    CAdsArgs args;

    CDosPathString strPath;
    if (!args.GetPathString(strPath))
        return RSERR;

    strPath.FullPath();

    args.Next();

    if (args.IsEmpty())
    {
        FILE* pfile = _wfopen(strPath, L"rb");
        if (pfile)
        {
            UINT32 crc = Calc32Crc(pfile);
            fclose(pfile);
            CString str;
            str.Format(L"%08X", crc);
            acedRetStr(str);
        }
        else
            acedRetNil();
    }
    else
    {
        FILE* pfile = _wfopen(strPath, L"rb");
        if (pfile)
        {
            ULONG64 crc = Calc64Crc(pfile);
            fclose(pfile);
            CString str;
            str.Format(L"%016I64X", crc);
            acedRetStr(str);
        }
        else
            acedRetNil();
    }

    return RSRSLT;
}